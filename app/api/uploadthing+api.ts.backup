import { createUploadthing, type FileRouter } from 'uploadthing/server';
import { createRouteHandler } from 'uploadthing/server';

const f = createUploadthing();

export const uploadRouter: FileRouter = {
  videoUploader: f({ video: { maxFileSize: '512MB' } })
    .middleware(async () => {
      return { userId: 'anonymous' };
    })
    .onUploadComplete(async ({ file }) => {
      return {
        videoId: file.key,
        url: file.ufsUrl,
      };
    }),
};

export type UploadRouter = typeof uploadRouter;

const handlers = createRouteHandler({
  router: uploadRouter,
  config: {
    token: process.env.UPLOADTHING_TOKEN,
  },
});

export { handlers as GET, handlers as POST };

// Simple UploadThing API route for EAS deployment
export async function GET(request: Request) {
  return new Response(JSON.stringify({ message: 'UploadThing API route' }), {
    headers: { 'Content-Type': 'application/json' },
  });
}

export async function POST(request: Request) {
  try {
    // For now, return a simple response
    // We'll implement the actual UploadThing logic later
    return new Response(
      JSON.stringify({ 
        error: 'UploadThing not yet implemented in deployed version',
        message: 'Please use local development for uploads'
      }),
      {
        status: 501,
        headers: { 'Content-Type': 'application/json' },
      }
    );
  } catch (error) {
    return new Response(
      JSON.stringify({ error: 'Internal server error' }),
      {
        status: 500,
        headers: { 'Content-Type': 'application/json' },
      }
    );
  }
}
