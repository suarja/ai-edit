import OpenAI from 'openai';
import { createOpenAIClient } from '../config/openai';

export class ScriptReviewer {
  private openai: OpenAI;
  private model: string;
  private static instance: ScriptReviewer;

  private constructor(model: string) {
    this.openai = createOpenAIClient();
    this.model = model;
  }

  public static getInstance(model: string): ScriptReviewer {
    if (!ScriptReviewer.instance) {
      ScriptReviewer.instance = new ScriptReviewer(model);
    }
    return ScriptReviewer.instance;
  }

  async review(
    script: string,
    editorialProfile: any,
    userSystemPrompt: string
  ): Promise<string> {
    try {
      console.log('Starting script review...');

      const completion = await this.openai.chat.completions.create({
        model: this.model,
        messages: [
          {
            role: 'system',
            content: `You are a script review agent in a creative automation pipeline.
Your task is to review, correct, and validate scripts generated for TikTok-style videos.
These scripts are written by another AI agent and intended to be converted into voiceovers using ElevenLabs TTS.
You are not generating the script. You are verifying and adjusting it to match:
	1.	The creator's editorial profile
	2.	The guidelines for TTS compatibility
	3.	The clarity and flow needed for short-form, spoken content

‚∏ª

üß© INPUT YOU RECEIVE

You receive a JSON object that includes:
	‚Ä¢	script: the script generated by a previous agent
	‚Ä¢	editorial_profile: a block of text with info like tone, style, persona, examples to avoid, writing preferences
	‚Ä¢	video_context (optional): tags or metadata from video clips provided by the creator
	‚Ä¢	prompt_intention: a user prompt or instruction summarizing the video's message/goal

‚∏ª

üõ†Ô∏è YOUR ROLE

Your job is to audit and fix the script to ensure it:
	1.	Reflects the creator's style: tone, rhythm, and narrative preferences
	2.	Matches the original intent of the video prompt
	3.	Is optimized for voice generation by ElevenLabs
	4.	Flows naturally when read aloud

‚∏ª

üó£Ô∏è VOICEOVER SANITIZATION RULES

Ensure the script is compatible with ElevenLabs voice synthesis:
	‚Ä¢	Avoid symbols like *, /, (), [], emojis, or markdown
	‚Ä¢	Remove or replace all textual stage directions (e.g. "[pause]", "(laughs)")
	‚Ä¢	Avoid all caps unless the creator's style requires shouting
	‚Ä¢	Punctuate properly: use . , ! ? ‚Äî no ellipses ‚Ä¶, slashes /, or pipes |
	‚Ä¢	Avoid long, nested, or convoluted sentences
	‚Ä¢	Avoid abbreviations unless phonetically readable (e.g. "AI" is fine, "w/" is not)

‚∏ª

‚ö†Ô∏è FLAG IF
	‚Ä¢	The script deviates from the creator's editorial profile
	‚Ä¢	It contains filler, clich√©s, vague phrases, or breaks clarity
	‚Ä¢	It's over 60 seconds when read aloud (~110‚Äì130 words max)
	‚Ä¢	It includes tech terms that aren't explained or simplified

‚∏ª

üéØ YOUR GOAL

Return the script with improvements if needed, or as is.
Do not provide comments in any shape of form, only the script ready to be spoken.
Ensure the script is smooth, clean, and ready for ElevenLabs synthesis without manual intervention.

 Editorial Profile:
            - Persona: ${editorialProfile.persona_description}
            - Tone: ${editorialProfile.tone_of_voice}
            - Audience: ${editorialProfile.audience}
            - Style: ${editorialProfile.style_notes}
            
`,
          },
          {
            role: 'user',
            content: `
            System Prompt from the user:
            ${userSystemPrompt}

            Script created from the user prompt by the script generator:
            ${script}
            `,
          },
        ],
      });

      const reviewedScript = completion.choices[0].message.content;
      if (!reviewedScript) {
        throw new Error('Failed to review script: Empty response');
      }

      // Validate script length
      const wordCount = reviewedScript.split(/\s+/).length;
      const estimatedDuration = wordCount * 0.4; // Rough estimate: 0.4 seconds per word

      if (estimatedDuration < 30 || estimatedDuration > 60) {
        console.warn(
          `Script duration warning: Estimated ${estimatedDuration.toFixed(
            1
          )} seconds`
        );
      }

      // Check for common issues
      const hasStageDirections = /[\[\(].*?[\]\)]/.test(reviewedScript);
      const hasInvalidPunctuation = /[‚Ä¶|\/]/.test(reviewedScript);
      const hasLongSentences = reviewedScript
        .split(/[.!?]/)
        .some((sentence) => sentence.split(/\s+/).length > 25);

      if (hasStageDirections || hasInvalidPunctuation || hasLongSentences) {
        console.warn('Script contains potential TTS issues');
      }

      return reviewedScript;
    } catch (error) {
      console.error('Error reviewing script:', error);
      throw new Error(`Failed to review script: ${error.message}`);
    }
  }
}
